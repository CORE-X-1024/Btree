<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="211"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (1 samples, 0.47%)</title><rect x="0.0000%" y="581" width="0.4739%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.47%)</title><rect x="0.0000%" y="565" width="0.4739%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>dyld`start (2 samples, 0.95%)</title><rect x="0.0000%" y="597" width="0.9479%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`main (1 samples, 0.47%)</title><rect x="0.4739%" y="581" width="0.4739%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.7239%" y="591.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`std::rt::lang_start_internal (1 samples, 0.47%)</title><rect x="0.4739%" y="565" width="0.4739%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.7239%" y="575.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`std::rt::lang_start::_{{closure}} (1 samples, 0.47%)</title><rect x="0.4739%" y="549" width="0.4739%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.7239%" y="559.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.47%)</title><rect x="0.4739%" y="533" width="0.4739%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.7239%" y="543.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`test::test_main_static (1 samples, 0.47%)</title><rect x="0.4739%" y="517" width="0.4739%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.7239%" y="527.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`test::test_main (1 samples, 0.47%)</title><rect x="0.4739%" y="501" width="0.4739%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.7239%" y="511.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`test::console::run_tests_console (1 samples, 0.47%)</title><rect x="0.4739%" y="485" width="0.4739%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.7239%" y="495.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`core::ptr::drop_in_place&lt;test::formatters::pretty::PrettyFormatter&lt;std::io::stdio::Stdout&gt;&gt; (1 samples, 0.47%)</title><rect x="0.4739%" y="469" width="0.4739%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.7239%" y="479.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 0.47%)</title><rect x="0.4739%" y="453" width="0.4739%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.7239%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.47%)</title><rect x="0.4739%" y="437" width="0.4739%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.7239%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.47%)</title><rect x="0.4739%" y="421" width="0.4739%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.7239%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.47%)</title><rect x="0.4739%" y="405" width="0.4739%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.7239%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 1.42%)</title><rect x="0.9479%" y="597" width="1.4218%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="3"/><text x="1.1979%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.47%)</title><rect x="2.8436%" y="501" width="0.4739%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="3.0936%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.47%)</title><rect x="3.3175%" y="341" width="0.4739%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="3.5675%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.47%)</title><rect x="3.3175%" y="325" width="0.4739%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="3.5675%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.47%)</title><rect x="3.7915%" y="277" width="0.4739%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="4.0415%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.47%)</title><rect x="4.2654%" y="261" width="0.4739%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="4.5154%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 1.90%)</title><rect x="4.7393%" y="245" width="1.8957%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="4"/><text x="4.9893%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 1.90%)</title><rect x="9.0047%" y="229" width="1.8957%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="4"/><text x="9.2547%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.47%)</title><rect x="10.9005%" y="229" width="0.4739%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="1"/><text x="11.1505%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.47%)</title><rect x="10.9005%" y="213" width="0.4739%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="1"/><text x="11.1505%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.47%)</title><rect x="11.3744%" y="229" width="0.4739%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="1"/><text x="11.6244%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 2.37%)</title><rect x="12.3223%" y="213" width="2.3697%" height="15" fill="rgb(225,111,53)" fg:x="26" fg:w="5"/><text x="12.5723%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.47%)</title><rect x="14.6919%" y="213" width="0.4739%" height="15" fill="rgb(238,160,17)" fg:x="31" fg:w="1"/><text x="14.9419%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 1.42%)</title><rect x="15.1659%" y="213" width="1.4218%" height="15" fill="rgb(214,148,48)" fg:x="32" fg:w="3"/><text x="15.4159%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 1.42%)</title><rect x="15.1659%" y="197" width="1.4218%" height="15" fill="rgb(232,36,49)" fg:x="32" fg:w="3"/><text x="15.4159%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 1.42%)</title><rect x="15.1659%" y="181" width="1.4218%" height="15" fill="rgb(209,103,24)" fg:x="32" fg:w="3"/><text x="15.4159%" y="191.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.90%)</title><rect x="16.5877%" y="213" width="1.8957%" height="15" fill="rgb(229,88,8)" fg:x="35" fg:w="4"/><text x="16.8377%" y="223.50">t..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.95%)</title><rect x="17.5355%" y="197" width="0.9479%" height="15" fill="rgb(213,181,19)" fg:x="37" fg:w="2"/><text x="17.7855%" y="207.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 15.64%)</title><rect x="3.3175%" y="453" width="15.6398%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="33"/><text x="3.5675%" y="463.50">test_it_works-caeadc4f5e..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 15.64%)</title><rect x="3.3175%" y="437" width="15.6398%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="33"/><text x="3.5675%" y="447.50">test_it_works-caeadc4f5e..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 15.64%)</title><rect x="3.3175%" y="421" width="15.6398%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="33"/><text x="3.5675%" y="431.50">test_it_works-caeadc4f5e..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 15.64%)</title><rect x="3.3175%" y="405" width="15.6398%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="33"/><text x="3.5675%" y="415.50">test_it_works-caeadc4f5e..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 15.64%)</title><rect x="3.3175%" y="389" width="15.6398%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="33"/><text x="3.5675%" y="399.50">test_it_works-caeadc4f5e..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 15.64%)</title><rect x="3.3175%" y="373" width="15.6398%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="33"/><text x="3.5675%" y="383.50">test_it_works-caeadc4f5e..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 15.64%)</title><rect x="3.3175%" y="357" width="15.6398%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="33"/><text x="3.5675%" y="367.50">test_it_works-caeadc4f5e..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 15.17%)</title><rect x="3.7915%" y="341" width="15.1659%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="32"/><text x="4.0415%" y="351.50">test_it_works-caeadc4f5..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 15.17%)</title><rect x="3.7915%" y="325" width="15.1659%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="32"/><text x="4.0415%" y="335.50">test_it_works-caeadc4f5..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 15.17%)</title><rect x="3.7915%" y="309" width="15.1659%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="32"/><text x="4.0415%" y="319.50">test_it_works-caeadc4f5..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 15.17%)</title><rect x="3.7915%" y="293" width="15.1659%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="32"/><text x="4.0415%" y="303.50">test_it_works-caeadc4f5..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 14.69%)</title><rect x="4.2654%" y="277" width="14.6919%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="31"/><text x="4.5154%" y="287.50">test_it_works-caeadc4f..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 14.22%)</title><rect x="4.7393%" y="261" width="14.2180%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="30"/><text x="4.9893%" y="271.50">test_it_works-caeadc4f..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 12.32%)</title><rect x="6.6351%" y="245" width="12.3223%" height="15" fill="rgb(218,138,4)" fg:x="14" fg:w="26"/><text x="6.8851%" y="255.50">test_it_works-caea..</text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 7.11%)</title><rect x="11.8483%" y="229" width="7.1090%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="15"/><text x="12.0983%" y="239.50">test_it_wo..</text></g><g><title>test_it_works-caeadc4f5e34d31b`__rdl_dealloc (1 samples, 0.47%)</title><rect x="18.4834%" y="213" width="0.4739%" height="15" fill="rgb(239,60,40)" fg:x="39" fg:w="1"/><text x="18.7334%" y="223.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.47%)</title><rect x="18.9573%" y="453" width="0.4739%" height="15" fill="rgb(206,27,48)" fg:x="40" fg:w="1"/><text x="19.2073%" y="463.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.47%)</title><rect x="31.2796%" y="341" width="0.4739%" height="15" fill="rgb(225,35,8)" fg:x="66" fg:w="1"/><text x="31.5296%" y="351.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.47%)</title><rect x="31.2796%" y="325" width="0.4739%" height="15" fill="rgb(250,213,24)" fg:x="66" fg:w="1"/><text x="31.5296%" y="335.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (1 samples, 0.47%)</title><rect x="31.2796%" y="309" width="0.4739%" height="15" fill="rgb(247,123,22)" fg:x="66" fg:w="1"/><text x="31.5296%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.47%)</title><rect x="31.2796%" y="293" width="0.4739%" height="15" fill="rgb(231,138,38)" fg:x="66" fg:w="1"/><text x="31.5296%" y="303.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.47%)</title><rect x="35.0711%" y="309" width="0.4739%" height="15" fill="rgb(231,145,46)" fg:x="74" fg:w="1"/><text x="35.3211%" y="319.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.47%)</title><rect x="35.0711%" y="293" width="0.4739%" height="15" fill="rgb(251,118,11)" fg:x="74" fg:w="1"/><text x="35.3211%" y="303.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (1 samples, 0.47%)</title><rect x="35.0711%" y="277" width="0.4739%" height="15" fill="rgb(217,147,25)" fg:x="74" fg:w="1"/><text x="35.3211%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.47%)</title><rect x="35.0711%" y="261" width="0.4739%" height="15" fill="rgb(247,81,37)" fg:x="74" fg:w="1"/><text x="35.3211%" y="271.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.47%)</title><rect x="36.9668%" y="293" width="0.4739%" height="15" fill="rgb(209,12,38)" fg:x="78" fg:w="1"/><text x="37.2168%" y="303.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.47%)</title><rect x="36.9668%" y="277" width="0.4739%" height="15" fill="rgb(227,1,9)" fg:x="78" fg:w="1"/><text x="37.2168%" y="287.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (1 samples, 0.47%)</title><rect x="36.9668%" y="261" width="0.4739%" height="15" fill="rgb(248,47,43)" fg:x="78" fg:w="1"/><text x="37.2168%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.47%)</title><rect x="36.9668%" y="245" width="0.4739%" height="15" fill="rgb(221,10,30)" fg:x="78" fg:w="1"/><text x="37.2168%" y="255.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::remove (1 samples, 0.47%)</title><rect x="37.4408%" y="293" width="0.4739%" height="15" fill="rgb(210,229,1)" fg:x="79" fg:w="1"/><text x="37.6908%" y="303.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.47%)</title><rect x="41.2322%" y="277" width="0.4739%" height="15" fill="rgb(222,148,37)" fg:x="87" fg:w="1"/><text x="41.4822%" y="287.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.47%)</title><rect x="41.2322%" y="261" width="0.4739%" height="15" fill="rgb(234,67,33)" fg:x="87" fg:w="1"/><text x="41.4822%" y="271.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (1 samples, 0.47%)</title><rect x="41.2322%" y="245" width="0.4739%" height="15" fill="rgb(247,98,35)" fg:x="87" fg:w="1"/><text x="41.4822%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.47%)</title><rect x="41.2322%" y="229" width="0.4739%" height="15" fill="rgb(247,138,52)" fg:x="87" fg:w="1"/><text x="41.4822%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.47%)</title><rect x="41.2322%" y="213" width="0.4739%" height="15" fill="rgb(213,79,30)" fg:x="87" fg:w="1"/><text x="41.4822%" y="223.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (4 samples, 1.90%)</title><rect x="45.9716%" y="261" width="1.8957%" height="15" fill="rgb(246,177,23)" fg:x="97" fg:w="4"/><text x="46.2216%" y="271.50">t..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 1.90%)</title><rect x="45.9716%" y="245" width="1.8957%" height="15" fill="rgb(230,62,27)" fg:x="97" fg:w="4"/><text x="46.2216%" y="255.50">t..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (4 samples, 1.90%)</title><rect x="45.9716%" y="229" width="1.8957%" height="15" fill="rgb(216,154,8)" fg:x="97" fg:w="4"/><text x="46.2216%" y="239.50">t..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 1.90%)</title><rect x="45.9716%" y="213" width="1.8957%" height="15" fill="rgb(244,35,45)" fg:x="97" fg:w="4"/><text x="46.2216%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.47%)</title><rect x="49.2891%" y="213" width="0.4739%" height="15" fill="rgb(251,115,12)" fg:x="104" fg:w="1"/><text x="49.5391%" y="223.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (4 samples, 1.90%)</title><rect x="49.2891%" y="245" width="1.8957%" height="15" fill="rgb(240,54,50)" fg:x="104" fg:w="4"/><text x="49.5391%" y="255.50">t..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 1.90%)</title><rect x="49.2891%" y="229" width="1.8957%" height="15" fill="rgb(233,84,52)" fg:x="104" fg:w="4"/><text x="49.5391%" y="239.50">t..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (3 samples, 1.42%)</title><rect x="49.7630%" y="213" width="1.4218%" height="15" fill="rgb(207,117,47)" fg:x="105" fg:w="3"/><text x="50.0130%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 1.42%)</title><rect x="49.7630%" y="197" width="1.4218%" height="15" fill="rgb(249,43,39)" fg:x="105" fg:w="3"/><text x="50.0130%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.47%)</title><rect x="50.7109%" y="181" width="0.4739%" height="15" fill="rgb(209,38,44)" fg:x="107" fg:w="1"/><text x="50.9609%" y="191.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`__rdl_alloc (1 samples, 0.47%)</title><rect x="52.6066%" y="197" width="0.4739%" height="15" fill="rgb(236,212,23)" fg:x="111" fg:w="1"/><text x="52.8566%" y="207.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (12 samples, 5.69%)</title><rect x="51.6588%" y="229" width="5.6872%" height="15" fill="rgb(242,79,21)" fg:x="109" fg:w="12"/><text x="51.9088%" y="239.50">test_it..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 4.74%)</title><rect x="52.6066%" y="213" width="4.7393%" height="15" fill="rgb(211,96,35)" fg:x="111" fg:w="10"/><text x="52.8566%" y="223.50">test_i..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (9 samples, 4.27%)</title><rect x="53.0806%" y="197" width="4.2654%" height="15" fill="rgb(253,215,40)" fg:x="112" fg:w="9"/><text x="53.3306%" y="207.50">test_..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 4.27%)</title><rect x="53.0806%" y="181" width="4.2654%" height="15" fill="rgb(211,81,21)" fg:x="112" fg:w="9"/><text x="53.3306%" y="191.50">libsy..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::insert (1 samples, 0.47%)</title><rect x="57.3460%" y="229" width="0.4739%" height="15" fill="rgb(208,190,38)" fg:x="121" fg:w="1"/><text x="57.5960%" y="239.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::remove (1 samples, 0.47%)</title><rect x="57.8199%" y="229" width="0.4739%" height="15" fill="rgb(235,213,38)" fg:x="122" fg:w="1"/><text x="58.0699%" y="239.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.47%)</title><rect x="58.2938%" y="229" width="0.4739%" height="15" fill="rgb(237,122,38)" fg:x="123" fg:w="1"/><text x="58.5438%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.47%)</title><rect x="61.1374%" y="181" width="0.4739%" height="15" fill="rgb(244,218,35)" fg:x="129" fg:w="1"/><text x="61.3874%" y="191.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (14 samples, 6.64%)</title><rect x="61.1374%" y="213" width="6.6351%" height="15" fill="rgb(240,68,47)" fg:x="129" fg:w="14"/><text x="61.3874%" y="223.50">test_it_w..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 6.64%)</title><rect x="61.1374%" y="197" width="6.6351%" height="15" fill="rgb(210,16,53)" fg:x="129" fg:w="14"/><text x="61.3874%" y="207.50">test_it_w..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (13 samples, 6.16%)</title><rect x="61.6114%" y="181" width="6.1611%" height="15" fill="rgb(235,124,12)" fg:x="130" fg:w="13"/><text x="61.8614%" y="191.50">test_it_..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 6.16%)</title><rect x="61.6114%" y="165" width="6.1611%" height="15" fill="rgb(224,169,11)" fg:x="130" fg:w="13"/><text x="61.8614%" y="175.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 1.42%)</title><rect x="66.3507%" y="149" width="1.4218%" height="15" fill="rgb(250,166,2)" fg:x="140" fg:w="3"/><text x="66.6007%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.47%)</title><rect x="67.2986%" y="133" width="0.4739%" height="15" fill="rgb(242,216,29)" fg:x="142" fg:w="1"/><text x="67.5486%" y="143.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::insert (2 samples, 0.95%)</title><rect x="67.7725%" y="213" width="0.9479%" height="15" fill="rgb(230,116,27)" fg:x="143" fg:w="2"/><text x="68.0225%" y="223.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::remove (1 samples, 0.47%)</title><rect x="68.7204%" y="213" width="0.4739%" height="15" fill="rgb(228,99,48)" fg:x="145" fg:w="1"/><text x="68.9704%" y="223.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (7 samples, 3.32%)</title><rect x="72.5118%" y="197" width="3.3175%" height="15" fill="rgb(253,11,6)" fg:x="153" fg:w="7"/><text x="72.7618%" y="207.50">tes..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 2.84%)</title><rect x="72.9858%" y="181" width="2.8436%" height="15" fill="rgb(247,143,39)" fg:x="154" fg:w="6"/><text x="73.2358%" y="191.50">te..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (6 samples, 2.84%)</title><rect x="72.9858%" y="165" width="2.8436%" height="15" fill="rgb(236,97,10)" fg:x="154" fg:w="6"/><text x="73.2358%" y="175.50">te..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 2.84%)</title><rect x="72.9858%" y="149" width="2.8436%" height="15" fill="rgb(233,208,19)" fg:x="154" fg:w="6"/><text x="73.2358%" y="159.50">li..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.47%)</title><rect x="75.8294%" y="197" width="0.4739%" height="15" fill="rgb(216,164,2)" fg:x="160" fg:w="1"/><text x="76.0794%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.47%)</title><rect x="77.2512%" y="181" width="0.4739%" height="15" fill="rgb(220,129,5)" fg:x="163" fg:w="1"/><text x="77.5012%" y="191.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (3 samples, 1.42%)</title><rect x="77.7251%" y="181" width="1.4218%" height="15" fill="rgb(242,17,10)" fg:x="164" fg:w="3"/><text x="77.9751%" y="191.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.42%)</title><rect x="77.7251%" y="165" width="1.4218%" height="15" fill="rgb(242,107,0)" fg:x="164" fg:w="3"/><text x="77.9751%" y="175.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (3 samples, 1.42%)</title><rect x="77.7251%" y="149" width="1.4218%" height="15" fill="rgb(251,28,31)" fg:x="164" fg:w="3"/><text x="77.9751%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.95%)</title><rect x="78.1991%" y="133" width="0.9479%" height="15" fill="rgb(233,223,10)" fg:x="165" fg:w="2"/><text x="78.4491%" y="143.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::insert (1 samples, 0.47%)</title><rect x="79.1469%" y="181" width="0.4739%" height="15" fill="rgb(215,21,27)" fg:x="167" fg:w="1"/><text x="79.3969%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.95%)</title><rect x="80.0948%" y="133" width="0.9479%" height="15" fill="rgb(232,23,21)" fg:x="169" fg:w="2"/><text x="80.3448%" y="143.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::BTree::add (131 samples, 62.09%)</title><rect x="19.4313%" y="453" width="62.0853%" height="15" fill="rgb(244,5,23)" fg:x="41" fg:w="131"/><text x="19.6813%" y="463.50">test_it_works-caeadc4f5e34d31b`test_it_works::BTree::add</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (129 samples, 61.14%)</title><rect x="20.3791%" y="437" width="61.1374%" height="15" fill="rgb(226,81,46)" fg:x="43" fg:w="129"/><text x="20.6291%" y="447.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (124 samples, 58.77%)</title><rect x="22.7488%" y="421" width="58.7678%" height="15" fill="rgb(247,70,30)" fg:x="48" fg:w="124"/><text x="22.9988%" y="431.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (120 samples, 56.87%)</title><rect x="24.6445%" y="405" width="56.8720%" height="15" fill="rgb(212,68,19)" fg:x="52" fg:w="120"/><text x="24.8945%" y="415.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (117 samples, 55.45%)</title><rect x="26.0664%" y="389" width="55.4502%" height="15" fill="rgb(240,187,13)" fg:x="55" fg:w="117"/><text x="26.3164%" y="399.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (112 samples, 53.08%)</title><rect x="28.4360%" y="373" width="53.0806%" height="15" fill="rgb(223,113,26)" fg:x="60" fg:w="112"/><text x="28.6860%" y="383.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (110 samples, 52.13%)</title><rect x="29.3839%" y="357" width="52.1327%" height="15" fill="rgb(206,192,2)" fg:x="62" fg:w="110"/><text x="29.6339%" y="367.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (105 samples, 49.76%)</title><rect x="31.7536%" y="341" width="49.7630%" height="15" fill="rgb(241,108,4)" fg:x="67" fg:w="105"/><text x="32.0036%" y="351.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (102 samples, 48.34%)</title><rect x="33.1754%" y="325" width="48.3412%" height="15" fill="rgb(247,173,49)" fg:x="70" fg:w="102"/><text x="33.4254%" y="335.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (97 samples, 45.97%)</title><rect x="35.5450%" y="309" width="45.9716%" height="15" fill="rgb(224,114,35)" fg:x="75" fg:w="97"/><text x="35.7950%" y="319.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (92 samples, 43.60%)</title><rect x="37.9147%" y="293" width="43.6019%" height="15" fill="rgb(245,159,27)" fg:x="80" fg:w="92"/><text x="38.1647%" y="303.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (84 samples, 39.81%)</title><rect x="41.7062%" y="277" width="39.8104%" height="15" fill="rgb(245,172,44)" fg:x="88" fg:w="84"/><text x="41.9562%" y="287.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (71 samples, 33.65%)</title><rect x="47.8673%" y="261" width="33.6493%" height="15" fill="rgb(236,23,11)" fg:x="101" fg:w="71"/><text x="48.1173%" y="271.50">test_it_works-caeadc4f5e34d31b`test_it_works::Node::ins..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (64 samples, 30.33%)</title><rect x="51.1848%" y="245" width="30.3318%" height="15" fill="rgb(205,117,38)" fg:x="108" fg:w="64"/><text x="51.4348%" y="255.50">test_it_works-caeadc4f5e34d31b`test_it_works::Nod..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (48 samples, 22.75%)</title><rect x="58.7678%" y="229" width="22.7488%" height="15" fill="rgb(237,72,25)" fg:x="124" fg:w="48"/><text x="59.0178%" y="239.50">test_it_works-caeadc4f5e34d31b`test_..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (26 samples, 12.32%)</title><rect x="69.1943%" y="213" width="12.3223%" height="15" fill="rgb(244,70,9)" fg:x="146" fg:w="26"/><text x="69.4443%" y="223.50">test_it_works-caea..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (11 samples, 5.21%)</title><rect x="76.3033%" y="197" width="5.2133%" height="15" fill="rgb(217,125,39)" fg:x="161" fg:w="11"/><text x="76.5533%" y="207.50">test_i..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (4 samples, 1.90%)</title><rect x="79.6209%" y="181" width="1.8957%" height="15" fill="rgb(235,36,10)" fg:x="168" fg:w="4"/><text x="79.8709%" y="191.50">t..</text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (3 samples, 1.42%)</title><rect x="80.0948%" y="165" width="1.4218%" height="15" fill="rgb(251,123,47)" fg:x="169" fg:w="3"/><text x="80.3448%" y="175.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.42%)</title><rect x="80.0948%" y="149" width="1.4218%" height="15" fill="rgb(221,13,13)" fg:x="169" fg:w="3"/><text x="80.3448%" y="159.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (1 samples, 0.47%)</title><rect x="81.0427%" y="133" width="0.4739%" height="15" fill="rgb(238,131,9)" fg:x="171" fg:w="1"/><text x="81.2927%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.47%)</title><rect x="81.0427%" y="117" width="0.4739%" height="15" fill="rgb(211,50,8)" fg:x="171" fg:w="1"/><text x="81.2927%" y="127.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`std::io::stdio::_print (1 samples, 0.47%)</title><rect x="82.9384%" y="261" width="0.4739%" height="15" fill="rgb(245,182,24)" fg:x="175" fg:w="1"/><text x="83.1884%" y="271.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`std::io::stdio::print_to_buffer_if_capture_used (1 samples, 0.47%)</title><rect x="82.9384%" y="245" width="0.4739%" height="15" fill="rgb(242,14,37)" fg:x="175" fg:w="1"/><text x="83.1884%" y="255.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::write (1 samples, 0.47%)</title><rect x="82.9384%" y="229" width="0.4739%" height="15" fill="rgb(246,228,12)" fg:x="175" fg:w="1"/><text x="83.1884%" y="239.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.47%)</title><rect x="82.9384%" y="213" width="0.4739%" height="15" fill="rgb(213,55,15)" fg:x="175" fg:w="1"/><text x="83.1884%" y="223.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`std::io::stdio::_print (1 samples, 0.47%)</title><rect x="86.2559%" y="229" width="0.4739%" height="15" fill="rgb(209,9,3)" fg:x="182" fg:w="1"/><text x="86.5059%" y="239.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`std::io::stdio::print_to_buffer_if_capture_used (1 samples, 0.47%)</title><rect x="86.2559%" y="213" width="0.4739%" height="15" fill="rgb(230,59,30)" fg:x="182" fg:w="1"/><text x="86.5059%" y="223.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::write (1 samples, 0.47%)</title><rect x="86.2559%" y="197" width="0.4739%" height="15" fill="rgb(209,121,21)" fg:x="182" fg:w="1"/><text x="86.5059%" y="207.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.47%)</title><rect x="86.2559%" y="181" width="0.4739%" height="15" fill="rgb(220,109,13)" fg:x="182" fg:w="1"/><text x="86.5059%" y="191.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::Formatter::pad_integral (1 samples, 0.47%)</title><rect x="86.2559%" y="165" width="0.4739%" height="15" fill="rgb(232,18,1)" fg:x="182" fg:w="1"/><text x="86.5059%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 1.42%)</title><rect x="89.5735%" y="181" width="1.4218%" height="15" fill="rgb(215,41,42)" fg:x="189" fg:w="3"/><text x="89.8235%" y="191.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`std::io::stdio::_print (5 samples, 2.37%)</title><rect x="89.5735%" y="213" width="2.3697%" height="15" fill="rgb(224,123,36)" fg:x="189" fg:w="5"/><text x="89.8235%" y="223.50">te..</text></g><g><title>test_it_works-caeadc4f5e34d31b`std::io::stdio::print_to_buffer_if_capture_used (5 samples, 2.37%)</title><rect x="89.5735%" y="197" width="2.3697%" height="15" fill="rgb(240,125,3)" fg:x="189" fg:w="5"/><text x="89.8235%" y="207.50">te..</text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::write (2 samples, 0.95%)</title><rect x="90.9953%" y="181" width="0.9479%" height="15" fill="rgb(205,98,50)" fg:x="192" fg:w="2"/><text x="91.2453%" y="191.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.95%)</title><rect x="90.9953%" y="165" width="0.9479%" height="15" fill="rgb(205,185,37)" fg:x="192" fg:w="2"/><text x="91.2453%" y="175.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.47%)</title><rect x="91.4692%" y="149" width="0.4739%" height="15" fill="rgb(238,207,15)" fg:x="193" fg:w="1"/><text x="91.7192%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.47%)</title><rect x="91.4692%" y="133" width="0.4739%" height="15" fill="rgb(213,199,42)" fg:x="193" fg:w="1"/><text x="91.7192%" y="143.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.47%)</title><rect x="93.8389%" y="197" width="0.4739%" height="15" fill="rgb(235,201,11)" fg:x="198" fg:w="1"/><text x="94.0889%" y="207.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (1 samples, 0.47%)</title><rect x="93.8389%" y="181" width="0.4739%" height="15" fill="rgb(207,46,11)" fg:x="198" fg:w="1"/><text x="94.0889%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.47%)</title><rect x="93.8389%" y="165" width="0.4739%" height="15" fill="rgb(241,35,35)" fg:x="198" fg:w="1"/><text x="94.0889%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.47%)</title><rect x="93.8389%" y="149" width="0.4739%" height="15" fill="rgb(243,32,47)" fg:x="198" fg:w="1"/><text x="94.0889%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.47%)</title><rect x="93.8389%" y="133" width="0.4739%" height="15" fill="rgb(247,202,23)" fg:x="198" fg:w="1"/><text x="94.0889%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.47%)</title><rect x="93.8389%" y="117" width="0.4739%" height="15" fill="rgb(219,102,11)" fg:x="198" fg:w="1"/><text x="94.0889%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.47%)</title><rect x="94.3128%" y="181" width="0.4739%" height="15" fill="rgb(243,110,44)" fg:x="199" fg:w="1"/><text x="94.5628%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.95%)</title><rect x="94.7867%" y="165" width="0.9479%" height="15" fill="rgb(222,74,54)" fg:x="200" fg:w="2"/><text x="95.0367%" y="175.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.47%)</title><rect x="96.2085%" y="149" width="0.4739%" height="15" fill="rgb(216,99,12)" fg:x="203" fg:w="1"/><text x="96.4585%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.47%)</title><rect x="98.1043%" y="117" width="0.4739%" height="15" fill="rgb(226,22,26)" fg:x="207" fg:w="1"/><text x="98.3543%" y="127.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.95%)</title><rect x="98.1043%" y="133" width="0.9479%" height="15" fill="rgb(217,163,10)" fg:x="207" fg:w="2"/><text x="98.3543%" y="143.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.47%)</title><rect x="98.5782%" y="117" width="0.4739%" height="15" fill="rgb(213,25,53)" fg:x="208" fg:w="1"/><text x="98.8282%" y="127.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::raw_vec::finish_grow (1 samples, 0.47%)</title><rect x="98.5782%" y="101" width="0.4739%" height="15" fill="rgb(252,105,26)" fg:x="208" fg:w="1"/><text x="98.8282%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.47%)</title><rect x="98.5782%" y="85" width="0.4739%" height="15" fill="rgb(220,39,43)" fg:x="208" fg:w="1"/><text x="98.8282%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.47%)</title><rect x="98.5782%" y="69" width="0.4739%" height="15" fill="rgb(229,68,48)" fg:x="208" fg:w="1"/><text x="98.8282%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.47%)</title><rect x="98.5782%" y="53" width="0.4739%" height="15" fill="rgb(252,8,32)" fg:x="208" fg:w="1"/><text x="98.8282%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.47%)</title><rect x="98.5782%" y="37" width="0.4739%" height="15" fill="rgb(223,20,43)" fg:x="208" fg:w="1"/><text x="98.8282%" y="47.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::tests::insert_in_ascending_order2 (203 samples, 96.21%)</title><rect x="3.3175%" y="469" width="96.2085%" height="15" fill="rgb(229,81,49)" fg:x="7" fg:w="203"/><text x="3.5675%" y="479.50">test_it_works-caeadc4f5e34d31b`test_it_works::tests::insert_in_ascending_order2</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="453" width="18.0095%" height="15" fill="rgb(236,28,36)" fg:x="172" fg:w="38"/><text x="81.7666%" y="463.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="437" width="18.0095%" height="15" fill="rgb(249,185,26)" fg:x="172" fg:w="38"/><text x="81.7666%" y="447.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="421" width="18.0095%" height="15" fill="rgb(249,174,33)" fg:x="172" fg:w="38"/><text x="81.7666%" y="431.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="405" width="18.0095%" height="15" fill="rgb(233,201,37)" fg:x="172" fg:w="38"/><text x="81.7666%" y="415.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="389" width="18.0095%" height="15" fill="rgb(221,78,26)" fg:x="172" fg:w="38"/><text x="81.7666%" y="399.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="373" width="18.0095%" height="15" fill="rgb(250,127,30)" fg:x="172" fg:w="38"/><text x="81.7666%" y="383.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="357" width="18.0095%" height="15" fill="rgb(230,49,44)" fg:x="172" fg:w="38"/><text x="81.7666%" y="367.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="341" width="18.0095%" height="15" fill="rgb(229,67,23)" fg:x="172" fg:w="38"/><text x="81.7666%" y="351.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="325" width="18.0095%" height="15" fill="rgb(249,83,47)" fg:x="172" fg:w="38"/><text x="81.7666%" y="335.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (38 samples, 18.01%)</title><rect x="81.5166%" y="309" width="18.0095%" height="15" fill="rgb(215,43,3)" fg:x="172" fg:w="38"/><text x="81.7666%" y="319.50">test_it_works-caeadc4f5e34d3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (37 samples, 17.54%)</title><rect x="81.9905%" y="293" width="17.5355%" height="15" fill="rgb(238,154,13)" fg:x="173" fg:w="37"/><text x="82.2405%" y="303.50">test_it_works-caeadc4f5e34d..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (36 samples, 17.06%)</title><rect x="82.4645%" y="277" width="17.0616%" height="15" fill="rgb(219,56,2)" fg:x="174" fg:w="36"/><text x="82.7145%" y="287.50">test_it_works-caeadc4f5e34..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (34 samples, 16.11%)</title><rect x="83.4123%" y="261" width="16.1137%" height="15" fill="rgb(233,0,4)" fg:x="176" fg:w="34"/><text x="83.6623%" y="271.50">test_it_works-caeadc4f5e3..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (31 samples, 14.69%)</title><rect x="84.8341%" y="245" width="14.6919%" height="15" fill="rgb(235,30,7)" fg:x="179" fg:w="31"/><text x="85.0841%" y="255.50">test_it_works-caeadc4f..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (27 samples, 12.80%)</title><rect x="86.7299%" y="229" width="12.7962%" height="15" fill="rgb(250,79,13)" fg:x="183" fg:w="27"/><text x="86.9799%" y="239.50">test_it_works-caead..</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::print_keys (16 samples, 7.58%)</title><rect x="91.9431%" y="213" width="7.5829%" height="15" fill="rgb(211,146,34)" fg:x="194" fg:w="16"/><text x="92.1931%" y="223.50">test_it_wo..</text></g><g><title>test_it_works-caeadc4f5e34d31b`std::io::stdio::_print (11 samples, 5.21%)</title><rect x="94.3128%" y="197" width="5.2133%" height="15" fill="rgb(228,22,38)" fg:x="199" fg:w="11"/><text x="94.5628%" y="207.50">test_i..</text></g><g><title>test_it_works-caeadc4f5e34d31b`std::io::stdio::print_to_buffer_if_capture_used (10 samples, 4.74%)</title><rect x="94.7867%" y="181" width="4.7393%" height="15" fill="rgb(235,168,5)" fg:x="200" fg:w="10"/><text x="95.0367%" y="191.50">test_i..</text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::write (8 samples, 3.79%)</title><rect x="95.7346%" y="165" width="3.7915%" height="15" fill="rgb(221,155,16)" fg:x="202" fg:w="8"/><text x="95.9846%" y="175.50">test..</text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (6 samples, 2.84%)</title><rect x="96.6825%" y="149" width="2.8436%" height="15" fill="rgb(215,215,53)" fg:x="204" fg:w="6"/><text x="96.9325%" y="159.50">te..</text></g><g><title>test_it_works-caeadc4f5e34d31b`core::fmt::Formatter::pad_integral (1 samples, 0.47%)</title><rect x="99.0521%" y="133" width="0.4739%" height="15" fill="rgb(223,4,10)" fg:x="209" fg:w="1"/><text x="99.3021%" y="143.50"></text></g><g><title>all (211 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="211"/><text x="0.2500%" y="623.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (206 samples, 97.63%)</title><rect x="2.3697%" y="597" width="97.6303%" height="15" fill="rgb(227,97,0)" fg:x="5" fg:w="206"/><text x="2.6197%" y="607.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (205 samples, 97.16%)</title><rect x="2.8436%" y="581" width="97.1564%" height="15" fill="rgb(234,150,53)" fg:x="6" fg:w="205"/><text x="3.0936%" y="591.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>test_it_works-caeadc4f5e34d31b`std::sys::unix::thread::Thread::new::thread_start (205 samples, 97.16%)</title><rect x="2.8436%" y="565" width="97.1564%" height="15" fill="rgb(228,201,54)" fg:x="6" fg:w="205"/><text x="3.0936%" y="575.50">test_it_works-caeadc4f5e34d31b`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>test_it_works-caeadc4f5e34d31b`core::ops::function::FnOnce::call_once{{vtable.shim}} (205 samples, 97.16%)</title><rect x="2.8436%" y="549" width="97.1564%" height="15" fill="rgb(222,22,37)" fg:x="6" fg:w="205"/><text x="3.0936%" y="559.50">test_it_works-caeadc4f5e34d31b`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>test_it_works-caeadc4f5e34d31b`std::sys_common::backtrace::__rust_begin_short_backtrace (205 samples, 97.16%)</title><rect x="2.8436%" y="533" width="97.1564%" height="15" fill="rgb(237,53,32)" fg:x="6" fg:w="205"/><text x="3.0936%" y="543.50">test_it_works-caeadc4f5e34d31b`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test_it_works-caeadc4f5e34d31b`test::run_test::_{{closure}} (205 samples, 97.16%)</title><rect x="2.8436%" y="517" width="97.1564%" height="15" fill="rgb(233,25,53)" fg:x="6" fg:w="205"/><text x="3.0936%" y="527.50">test_it_works-caeadc4f5e34d31b`test::run_test::_{{closure}}</text></g><g><title>test_it_works-caeadc4f5e34d31b`test::__rust_begin_short_backtrace (204 samples, 96.68%)</title><rect x="3.3175%" y="501" width="96.6825%" height="15" fill="rgb(210,40,34)" fg:x="7" fg:w="204"/><text x="3.5675%" y="511.50">test_it_works-caeadc4f5e34d31b`test::__rust_begin_short_backtrace</text></g><g><title>test_it_works-caeadc4f5e34d31b`core::ops::function::FnOnce::call_once (204 samples, 96.68%)</title><rect x="3.3175%" y="485" width="96.6825%" height="15" fill="rgb(241,220,44)" fg:x="7" fg:w="204"/><text x="3.5675%" y="495.50">test_it_works-caeadc4f5e34d31b`core::ops::function::FnOnce::call_once</text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::tests::insert_in_descending_order (1 samples, 0.47%)</title><rect x="99.5261%" y="469" width="0.4739%" height="15" fill="rgb(235,28,35)" fg:x="210" fg:w="1"/><text x="99.7761%" y="479.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::BTree::add (1 samples, 0.47%)</title><rect x="99.5261%" y="453" width="0.4739%" height="15" fill="rgb(210,56,17)" fg:x="210" fg:w="1"/><text x="99.7761%" y="463.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`test_it_works::Node::insert_key (1 samples, 0.47%)</title><rect x="99.5261%" y="437" width="0.4739%" height="15" fill="rgb(224,130,29)" fg:x="210" fg:w="1"/><text x="99.7761%" y="447.50"></text></g><g><title>test_it_works-caeadc4f5e34d31b`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::insert (1 samples, 0.47%)</title><rect x="99.5261%" y="421" width="0.4739%" height="15" fill="rgb(235,212,8)" fg:x="210" fg:w="1"/><text x="99.7761%" y="431.50"></text></g></svg></svg>